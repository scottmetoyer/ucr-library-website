{#
/**
 * @file
 * Theme override to display a node.
 *
 * Available variables:
 * - node: The node entity with limited access to object properties and methods.
 *   Only method names starting with "get", "has", or "is" and a few common
 *   methods such as "id", "label", and "bundle" are available. For example:
 *   - node.getCreatedTime() will return the node creation timestamp.
 *   - node.hasField('field_example') returns TRUE if the node bundle includes
 *     field_example. (This does not indicate the presence of a value in this
 *     field.)
 *   - node.isPublished() will return whether the node is published or not.
 *   Calling other methods, such as node.delete(), will result in an exception.
 *   See \Drupal\node\Entity\Node for a full list of public properties and
 *   methods for the node object.
 * - label: The title of the node.
 * - content: All node items. Use {{ content }} to print them all,
 *   or print a subset such as {{ content.field_example }}. Use
 *   {{ content|without('field_example') }} to temporarily suppress the printing
 *   of a given child element.
 * - author_picture: The node author user entity, rendered using the "compact"
 *   view mode.
 * - metadata: Metadata for this node.
 * - date: Themed creation date field.
 * - author_name: Themed author name field.
 * - url: Direct URL of the current node.
 * - display_submitted: Whether submission information should be displayed.
 * - attributes: HTML attributes for the containing element.
 *   The attributes.class element may contain one or more of the following
 *   classes:
 *   - node: The current template type (also known as a "theming hook").
 *   - node--type-[type]: The current node type. For example, if the node is an
 *     "Article" it would result in "node--type-article". Note that the machine
 *     name will often be in a short form of the human readable label.
 *   - node--view-mode-[view_mode]: The View Mode of the node; for example, a
 *     teaser would result in: "node--view-mode-teaser", and
 *     full: "node--view-mode-full".
 *   The following are controlled through the node publishing options.
 *   - node--promoted: Appears on nodes promoted to the front page.
 *   - node--sticky: Appears on nodes ordered above other non-sticky nodes in
 *     teaser listings.
 *   - node--unpublished: Appears on unpublished nodes visible only to site
 *     admins.
 * - title_attributes: Same as attributes, except applied to the main title
 *   tag that appears in the template.
 * - content_attributes: Same as attributes, except applied to the main
 *   content tag that appears in the template.
 * - author_attributes: Same as attributes, except applied to the author of
 *   the node tag that appears in the template.
 * - title_prefix: Additional output populated by modules, intended to be
 *   displayed in front of the main title tag that appears in the template.
 * - title_suffix: Additional output populated by modules, intended to be
 *   displayed after the main title tag that appears in the template.
 * - view_mode: View mode; for example, "teaser" or "full".
 * - teaser: Flag for the teaser state. Will be true if view_mode is 'teaser'.
 * - page: Flag for the full page state. Will be true if view_mode is 'full'.
 * - readmore: Flag for more state. Will be true if the teaser content of the
 *   node cannot hold the main body content.
 * - logged_in: Flag for authenticated user status. Will be true when the
 *   current user is a logged-in member.
 * - is_admin: Flag for admin user status. Will be true when the current user
 *   is an administrator.
 *
 * @see template_preprocess_node()
 *
 * @todo Remove the id attribute (or make it a class), because if that gets
 *   rendered twice on a page this is invalid CSS for example: two lists
 *   in different view modes.
 */
#}
{% set read_more = content.view.node  %}
{% set location = content.field_article_location|render|striptags|trim %}
{% set article_author = content.field_article_author|render|striptags|trim %}
{% set article_type = content.field_article_type_list['#items'].getString() %}
{% set tags = content.field_tags %}

<div class="article node">
    <figure class="article-image">
      {{ content.field_article_image }}
      <caption class="article-image-caption">
        {{ content.field_article_image_caption }}
      </caption>
      <span class="credit">{{ content.field_image_credit }}</span>
    </figure>
    <div class="article-summary">
      {{ node.body.summary }}
    </div>
    <div class="article-date">
      <span class="month">{{ content.field_article_date|render|striptags|trim|date('F') }}</span>
      <span class="day">{{ content.field_article_date|render|striptags|trim|date('d') }}</span>,
      <span class="year">{{ content.field_article_date|render|striptags|trim|date('Y') }}</span>
    </div>
    {% if article_author %}
    <div class="author-container">
      By {{ content.field_article_author }}
    </div>
    {% endif %}
    <div class="social-media">
      {{ content.addtoany  }}
    </div>
    <div class="article-body {% if article_type == "press" %}{{ article_type }}{% endif %}">
    {% if article_type == "press" and location is not empty %}
      {{ location }}
      <span>&ndash;</span>
    {% endif %}
      {{ content.body }}
    </div>
    {% if read_more is not empty %}
    <div class="article-link">
      {{ content.view_node }}<span class="show-for-sr">about {{ content.field_article_image_caption }}</span>
     Â»
   </div>
   {% endif %}
   {% if article_type == "blog" %}
   {{ tags }}
   <div class="more-link">
      <a href="/blog" class="btn-ucr-split">
        More Blog Posts
      </a>
    </div>
   {% elseif article_type == "news" %}
   <div class="more-link">
      <a href="/news" class="btn-ucr-split">
        More News Stories
      </a>
    </div>
    {%- elseif article_type == "press" -%}
       <div class="more-link">
        <a href="/press" class="btn-ucr-split">
          More Press Releases
        </a>
            </div>
    {% endif %}
</div>
